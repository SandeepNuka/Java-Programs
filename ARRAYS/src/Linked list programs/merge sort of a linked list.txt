[0:39 pm, 15/01/2022] +91 76808 29525: //Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;

class Node
{
    int data;
    Node next;
    Node(int key)
    {
        data = key;
        next = null;
    }
}

class Driverclass
{
    
    public static void main (String[] args) 
    {
        Scanner sc= new Scanner(System.in);
        int t = sc.nextInt();
        
        while(t-- > 0)
        {
            int n = sc.nextInt();
            Node head = new Node(sc.nextInt());
            Node tail = head;
            while(n-- > 1){
		        tail.next = new Node(sc.nextInt());
		        tail = tail.next;
		    }
		   
		      head = new Solution().mergeSort(head);
		     printList(head);
		    System.out.println();
        }
    }
    public static void printList(Node head)
    {
        if(head == null)
           return;
           
        Node temp = head;
        while(temp != null)
        {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
    }
}


// } Driver Code Ends


//User function Template for Java
/*
class Node
{
    int data;
    Node next;
    Node(int key)
    {
        this.data = key;
        next = null;
    }
} */

class Solution
{
public static Node findMiddleEle(Node head)
{  if(head==null) return head;

    Node fast=head.next;
     Node slow=head;
     
     while(fast!=null )
     
     { fast=fast.next;
     if(fast!=null){
         slow=slow.next;
         fast=fast.next;
     }
     }
     
     return slow;
     
}
    public static Node mergeBoth(Node first,Node second)
    {  Node answer=null;
         if(first==null)
           return second;
          if(second==null)
            return first;
            
    if(first.data<=second.data)
    {
        answer=first;
        answer.next=mergeBoth(first.next,second);
    }
    else{
    answer=second;
    answer.next=mergeBoth(first,second.next);
    }
    return answer;
}
    
    //Function to sort the given linked list using Merge Sort.
    static Node mergeSort(Node head)
    {
        
       
        if(head==null || head.next==null) return head;
       Node middle=findMiddleEle(head);
        Node nextofmiddle=middle.next;
         middle.next=null;
        Node first=mergeSort(head);
         
         Node second=mergeSort(nextofmiddle);
      
       
    Node sorted=mergeBoth(first,second);
       
        return sorted; 
    }
     
    
}